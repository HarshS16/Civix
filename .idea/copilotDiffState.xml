<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/COMMIT_MESSAGE.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/COMMIT_MESSAGE.txt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.jsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { Routes, Route } from 'react-router-dom';&#10;import { Toaster } from 'react-hot-toast';&#10;import { SignIn, SignUp, useAuth } from '@clerk/clerk-react';&#10;&#10;import Home from './Home';&#10;import Login from './components/Login';&#10;import Signup from './components/Signup';&#10;import PrivateRoute from './components/PrivateRoute';&#10;import RequireAdmin from './components/auth/RequireAdmin';&#10;import AdminDashboard from './components/AdminDashboard';&#10;import Error404 from './components/Error404';&#10;import Navbar from './components/Navbar';&#10;import Footer from './components/Footer';&#10;import ScrollToTop from './components/ScrollToTop';&#10;&#10;import About from './Pages/About';&#10;import Privacy from './Pages/Privacy';&#10;import Terms from './Pages/Terms';&#10;import Contact from './Pages/Contact';&#10;import ReportIssue from './Pages/ReportIssue';&#10;import ServerError from './components/ServerError';&#10;import DownloadAndroid from './Pages/DownloadAndroid';&#10;import DownloadIOS from './Pages/DownloadIOS';&#10;import NewIssue from './Pages/NewIssue';&#10;import IssueDetail from './Pages/IssueDetail';&#10;import UserDashboard from './Pages/UserDashboard';&#10;import CommunityVotingPage from './Pages/CommunityVotingPage';&#10;import Profile from './Pages/Profile';&#10;import Resources from './Pages/Resources';&#10;import MyComplaints from './Pages/MyComplaints';&#10;import CivicEducation from './Pages/CivicEducation';&#10;import CivicSimulator from './Pages/CivicSimulator';&#10;import Contributors from './Pages/Contributors';&#10;import ScrollToTopOnRouteChange from './components/ScrollToTopOnRouteChange';&#10;&#10;const App = () =&gt; {&#10;  const { isSignedIn } = useAuth();&#10;  // Only show Navbar if user is NOT signed in&#10;  return (&#10;    &lt;&gt;&#10;      &lt;ScrollToTop /&gt;&#10;      &lt;ScrollToTopOnRouteChange/&gt;&#10;      &lt;Toaster&#10;        position=&quot;top-right&quot;&#10;        toastOptions={{&#10;          className:&#10;            '!bg-white dark:!bg-gray-800 !text-gray-900 dark:!text-white !border !border-gray-200 dark:!border-gray-700',&#10;          duration: 4000,&#10;          success: {&#10;            iconTheme: { primary: '#10B981', secondary: 'white' },&#10;          },&#10;          error: {&#10;            iconTheme: { primary: '#EF4444', secondary: 'white' },&#10;          },&#10;        }}&#10;      /&gt;&#10;          &#10;      &lt;Navbar/&gt;&#10;&#10;      &lt;main className=&quot;min-h-screen&quot;&gt;&#10;        &lt;Routes&gt;&#10;          {/* Clerk Auth Routes */}&#10;          &lt;Route&#10;            path=&quot;/sign-in/*&quot;&#10;            element={&lt;SignIn routing=&quot;path&quot; path=&quot;/sign-in&quot; redirectUrl=&quot;/&quot; /&gt;}&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/signup/*&quot;&#10;            element={&lt;SignUp routing=&quot;path&quot; path=&quot;/signup&quot; redirectUrl=&quot;/&quot; /&gt;}&#10;          /&gt;&#10;&#10;          {/* Public Routes */}&#10;          &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;          &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;&#10;          &lt;Route path=&quot;/privacy&quot; element={&lt;Privacy /&gt;} /&gt;&#10;          &lt;Route path=&quot;/terms&quot; element={&lt;Terms /&gt;} /&gt;&#10;          &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#10;          &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#10;          &lt;Route path=&quot;/signup&quot; element={&lt;Signup /&gt;} /&gt;&#10;          &lt;Route path=&quot;/report-issue&quot; element={&lt;ReportIssue /&gt;} /&gt;&#10;          &lt;Route path=&quot;/download-android&quot; element={&lt;DownloadAndroid /&gt;} /&gt;&#10;          &lt;Route path=&quot;/download-ios&quot; element={&lt;DownloadIOS /&gt;} /&gt;&#10;          &lt;Route path=&quot;/issues/new&quot; element={&lt;NewIssue /&gt;} /&gt;&#10;          &lt;Route path=&quot;/issues/:id&quot; element={&lt;IssueDetail /&gt;} /&gt;&#10;          &lt;Route path=&quot;/civic-education&quot; element={&lt;CivicEducation /&gt;} /&gt;&#10;          &lt;Route path=&quot;/civic-simulator&quot; element={&lt;CivicSimulator /&gt;} /&gt;&#10;          &lt;Route path=&quot;/community-voting&quot; element={&lt;CommunityVotingPage /&gt;} /&gt;&#10;          &lt;Route path=&quot;/profile&quot; element={&lt;Profile /&gt;} /&gt;&#10;          &lt;Route path=&quot;/resources&quot; element={&lt;Resources /&gt;} /&gt;&#10;          &lt;Route path=&quot;/complaints&quot; element={&lt;MyComplaints /&gt;} /&gt;&#10;          &lt;Route path=&quot;/contributors&quot; element={&lt;Contributors /&gt;} /&gt;&#10;&#10;          {/* Protected Routes */}&#10;          &lt;Route&#10;            path=&quot;/admin&quot;&#10;            element={&#10;              &lt;RequireAdmin&gt;&#10;                &lt;AdminDashboard /&gt;&#10;              &lt;/RequireAdmin&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/admin/dashboard&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['admin']}&gt;&#10;                &lt;AdminDashboard /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/home&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#10;                &lt;Home /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/user/dashboard&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#10;                &lt;UserDashboard /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;&#10;          {/* Errors */}&#10;          &lt;Route path=&quot;/500&quot; element={&lt;ServerError /&gt;} /&gt;&#10;          &lt;Route path=&quot;*&quot; element={&lt;Error404 /&gt;} /&gt;&#10;        &lt;/Routes&gt;&#10;      &lt;/main&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;// import ChatBot from './components/Chatbot';&#10;&#10;// // Add this to your Layout component's return statement&#10;// function Layout({ children }) {&#10;//   return (&#10;//     &lt;div className=&quot;relative min-h-screen&quot;&gt;&#10;//       {/* Your existing layout code */}&#10;//       {children}&#10;      &#10;//       {/* Add the ChatBot component at the end */}&#10;//       &lt;ChatBot /&gt;&#10;//     &lt;/div&gt;&#10;//   );&#10;// }&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#13;&#10;import { Routes, Route, useLocation } from 'react-router-dom';&#13;&#10;import { Toaster } from 'react-hot-toast';&#13;&#10;import { SignIn, SignUp, useAuth } from '@clerk/clerk-react';&#13;&#10;import { AnimatePresence } from 'framer-motion';&#13;&#10;&#13;&#10;import Home from './Home';&#13;&#10;import Login from './components/Login';&#13;&#10;import Signup from './components/Signup';&#13;&#10;import PrivateRoute from './components/PrivateRoute';&#13;&#10;import RequireAdmin from './components/auth/RequireAdmin';&#13;&#10;import AdminDashboard from './components/AdminDashboard';&#13;&#10;import Error404 from './components/Error404';&#13;&#10;import Navbar from './components/Navbar';&#13;&#10;import Footer from './components/Footer';&#13;&#10;import ScrollToTop from './components/ScrollToTop';&#13;&#10;&#13;&#10;import About from './Pages/About';&#13;&#10;import Privacy from './Pages/Privacy';&#13;&#10;import Terms from './Pages/Terms';&#13;&#10;import Contact from './Pages/Contact';&#13;&#10;import ReportIssue from './Pages/ReportIssue';&#13;&#10;import ServerError from './components/ServerError';&#13;&#10;import DownloadAndroid from './Pages/DownloadAndroid';&#13;&#10;import DownloadIOS from './Pages/DownloadIOS';&#13;&#10;import NewIssue from './Pages/NewIssue';&#13;&#10;import IssueDetail from './Pages/IssueDetail';&#13;&#10;import UserDashboard from './Pages/UserDashboard';&#13;&#10;import CommunityVotingPage from './Pages/CommunityVotingPage';&#13;&#10;import Profile from './Pages/Profile';&#13;&#10;import Resources from './Pages/Resources';&#13;&#10;import MyComplaints from './Pages/MyComplaints';&#13;&#10;import CivicEducation from './Pages/CivicEducation';&#13;&#10;import CivicSimulator from './Pages/CivicSimulator';&#13;&#10;import Contributors from './Pages/Contributors';&#13;&#10;import ScrollToTopOnRouteChange from './components/ScrollToTopOnRouteChange';&#13;&#10;&#13;&#10;const App = () =&gt; {&#13;&#10;  const { isSignedIn } = useAuth();&#13;&#10;  const location = useLocation();&#13;&#10;  &#13;&#10;  return (&#13;&#10;    &lt;&gt;&#13;&#10;      &lt;ScrollToTop /&gt;&#13;&#10;      &lt;ScrollToTopOnRouteChange/&gt;&#13;&#10;      &lt;Toaster&#13;&#10;        position=&quot;top-right&quot;&#13;&#10;        toastOptions={{&#13;&#10;          className:&#13;&#10;            '!bg-white dark:!bg-gray-800 !text-gray-900 dark:!text-white !border !border-gray-200 dark:!border-gray-700',&#13;&#10;          duration: 4000,&#13;&#10;          success: {&#13;&#10;            iconTheme: { primary: '#10B981', secondary: 'white' },&#13;&#10;          },&#13;&#10;          error: {&#13;&#10;            iconTheme: { primary: '#EF4444', secondary: 'white' },&#13;&#10;          },&#13;&#10;        }}&#13;&#10;      /&gt;&#13;&#10;          &#13;&#10;      &lt;Navbar/&gt;&#13;&#10;&#13;&#10;      &lt;main className=&quot;min-h-screen&quot;&gt;&#13;&#10;        &lt;AnimatePresence mode=&quot;wait&quot; initial={false}&gt;&#13;&#10;          &lt;Routes location={location} key={location.pathname}&gt;&#13;&#10;            {/* Clerk Auth Routes */}&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/sign-in/*&quot;&#13;&#10;              element={&lt;SignIn routing=&quot;path&quot; path=&quot;/sign-in&quot; redirectUrl=&quot;/&quot; /&gt;}&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/signup/*&quot;&#13;&#10;              element={&lt;SignUp routing=&quot;path&quot; path=&quot;/signup&quot; redirectUrl=&quot;/&quot; /&gt;}&#13;&#10;            /&gt;&#13;&#10;&#13;&#10;            {/* Public Routes */}&#13;&#10;            &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/privacy&quot; element={&lt;Privacy /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/terms&quot; element={&lt;Terms /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/signup&quot; element={&lt;Signup /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/report-issue&quot; element={&lt;ReportIssue /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/download-android&quot; element={&lt;DownloadAndroid /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/download-ios&quot; element={&lt;DownloadIOS /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/issues/new&quot; element={&lt;NewIssue /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/issues/:id&quot; element={&lt;IssueDetail /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/civic-education&quot; element={&lt;CivicEducation /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/civic-simulator&quot; element={&lt;CivicSimulator /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/community-voting&quot; element={&lt;CommunityVotingPage /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/profile&quot; element={&lt;Profile /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/resources&quot; element={&lt;Resources /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/complaints&quot; element={&lt;MyComplaints /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/contributors&quot; element={&lt;Contributors /&gt;} /&gt;&#13;&#10;&#13;&#10;            {/* Protected Routes */}&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/admin&quot;&#13;&#10;              element={&#13;&#10;                &lt;RequireAdmin&gt;&#13;&#10;                  &lt;AdminDashboard /&gt;&#13;&#10;                &lt;/RequireAdmin&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/admin/dashboard&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['admin']}&gt;&#13;&#10;                  &lt;AdminDashboard /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/home&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#13;&#10;                  &lt;Home /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/user/dashboard&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#13;&#10;                  &lt;UserDashboard /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;&#13;&#10;            {/* Errors */}&#13;&#10;            &lt;Route path=&quot;/500&quot; element={&lt;ServerError /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;*&quot; element={&lt;Error404 /&gt;} /&gt;&#13;&#10;          &lt;/Routes&gt;&#13;&#10;        &lt;/AnimatePresence&gt;&#13;&#10;      &lt;/main&gt;&#13;&#10;&#13;&#10;      &lt;Footer /&gt;&#13;&#10;    &lt;/&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default App;&#13;&#10;// import ChatBot from './components/Chatbot';&#13;&#10;&#13;&#10;// // Add this to your Layout component's return statement&#13;&#10;// function Layout({ children }) {&#13;&#10;//   return (&#13;&#10;//     &lt;div className=&quot;relative min-h-screen&quot;&gt;&#13;&#10;//       {/* Your existing layout code */}&#13;&#10;//       {children}&#13;&#10;      &#13;&#10;//       {/* Add the ChatBot component at the end */}&#13;&#10;//       &lt;ChatBot /&gt;&#13;&#10;//     &lt;/div&gt;&#13;&#10;//   );&#13;&#10;// }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Pages/ReportIssue.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Pages/ReportIssue.jsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { motion } from 'framer-motion';&#10;import './ReportIssue.css';&#10;&#10;export default function ReportIssue() {&#10;  const [phone, setPhone] = useState('');&#10;  const [email, setEmail] = useState('');&#10;  const [title, setTitle] = useState('');&#10;  const [description, setDescription] = useState('');&#10;  const [file, setFile] = useState(null);&#10;  const [notifyByEmail, setNotifyByEmail] = useState(false);&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;&#10;    const formData = new FormData();&#10;    formData.append('title', title);&#10;    formData.append('email', email);&#10;    formData.append('description', description);&#10;    formData.append('phone', phone);&#10;    formData.append('notifyByEmail', notifyByEmail);&#10;    if (file) formData.append('file', file);&#10;&#10;    try {&#10;      const res = await fetch('http://localhost:5000/api/report', {&#10;        method: 'POST',&#10;        body: formData,&#10;      });&#10;&#10;      const data = await res.json();&#10;      alert(data.message);&#10;      setPhone('');&#10;      setEmail('');&#10;      setTitle('');&#10;      setDescription('');&#10;      setFile(null);&#10;      setNotifyByEmail(false);&#10;    } catch (err) {&#10;      console.error('Submit error:', err);&#10;      alert('Failed to submit issue.');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-br from-emerald-50 to-teal-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4 sm:p-6 lg:p-8 overflow-hidden&quot;&gt;&#10;      &lt;motion.div&#10;        className=&quot;absolute top-10 left-10 w-48 h-48 bg-emerald-200 rounded-full mix-blend-multiply filter blur-xl opacity-50 animate-blob&quot;&#10;        initial={{ scale: 0 }}&#10;        animate={{ scale: 1, rotate: 360 }}&#10;        transition={{ duration: 20, repeat: Infinity, repeatType: 'reverse', ease: 'easeInOut' }}&#10;      &gt;&lt;/motion.div&gt;&#10;      &lt;motion.div&#10;        className=&quot;absolute bottom-10 right-10 w-48 h-48 bg-teal-200 rounded-full mix-blend-multiply filter blur-xl opacity-50 animate-blob animation-delay-4000&quot;&#10;        initial={{ scale: 0 }}&#10;        animate={{ scale: 1, rotate: -360 }}&#10;        transition={{ duration: 25, repeat: Infinity, repeatType: 'reverse', ease: 'easeInOut' }}&#10;      &gt;&lt;/motion.div&gt;&#10;      &lt;motion.div&#10;        className=&quot;absolute top-1/2 left-1/2 w-32 h-32 bg-emerald-100 rounded-lg mix-blend-multiply filter blur-lg opacity-60 animate-blob animation-delay-2000&quot;&#10;        initial={{ scale: 0 }}&#10;        animate={{ scale: 1, rotate: 360 }}&#10;        transition={{ duration: 30, repeat: Infinity, repeatType: 'reverse', ease: 'easeInOut' }}&#10;      &gt;&lt;/motion.div&gt;&#10;&#10;      &lt;motion.div&#10;        initial={{ opacity: 0, y: 50 }}&#10;        animate={{ opacity: 1, y: 0 }}&#10;        transition={{ duration: 0.7, ease: 'easeOut' }}&#10;        className=&quot;bg-white/70 dark:bg-gray-800 backdrop-blur-xl rounded-xl shadow-2xl p-6 sm:p-8 lg:p-10 w-full max-w-md border border-gray-100 dark:border-gray-700 z-10&quot;&#10;      &gt;&#10;        &lt;h1 className=&quot;text-3xl font-extrabold text-center text-emerald-700 dark:text-white mb-6&quot;&gt;Report an Issue&lt;/h1&gt;&#10;        &lt;p className=&quot;text-center text-gray-600 dark:text-gray-200 mb-8&quot;&gt;&#10;          We're here to help! Please fill out the form below to report any issues you've encountered.&#10;        &lt;/p&gt;&#10;&#10;        &lt;form className=&quot;space-y-6&quot; onSubmit={handleSubmit}&gt;&#10;          &lt;div&gt;&#10;            &lt;label htmlFor=&quot;phone&quot; className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot;&gt;&#10;              Phone Number&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;tel&quot;&#10;              id=&quot;phone&quot;&#10;              placeholder=&quot;e.g., +91 98765 43210&quot;&#10;              value={phone}&#10;              onChange={(e) =&gt; setPhone(e.target.value)}&#10;              className=&quot;w-full border-gray-300 focus:border-emerald-500 focus:ring-emerald-500 rounded-md shadow-sm p-3 placeholder-gray-400 text-gray-700 dark:text-white dark:bg-gray-900 transition duration-150 ease-in-out&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div&gt;&#10;            &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot;&gt;&#10;              Email Address&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;email&quot;&#10;              id=&quot;email&quot;&#10;              placeholder=&quot;you@example.com&quot;&#10;              value={email}&#10;              onChange={(e) =&gt; setEmail(e.target.value)}&#10;              className=&quot;w-full border-gray-300 focus:border-emerald-500 focus:ring-emerald-500 rounded-md shadow-sm p-3 placeholder-gray-400 text-gray-700 dark:text-white dark:bg-gray-900 transition duration-150 ease-in-out&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div&gt;&#10;            &lt;label htmlFor=&quot;title&quot; className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot;&gt;&#10;              Issue Title&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              id=&quot;title&quot;&#10;              placeholder=&quot;e.g., Login button not working&quot;&#10;              value={title}&#10;              onChange={(e) =&gt; setTitle(e.target.value)}&#10;              className=&quot;w-full border-gray-300 focus:border-emerald-500 focus:ring-emerald-500 rounded-md shadow-sm p-3 placeholder-gray-400 text-gray-700 dark:text-white dark:bg-gray-900 transition duration-150 ease-in-out&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div&gt;&#10;            &lt;label htmlFor=&quot;description&quot; className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot;&gt;&#10;              Describe the Issue&#10;            &lt;/label&gt;&#10;            &lt;textarea&#10;              id=&quot;description&quot;&#10;              placeholder=&quot;Please provide as much detail as possible about the issue you're experiencing. When did it happen? What steps did you take?&quot;&#10;              value={description}&#10;              onChange={(e) =&gt; setDescription(e.target.value)}&#10;              rows=&quot;5&quot;&#10;              className=&quot;w-full border-gray-300 focus:border-emerald-500 focus:ring-emerald-500 rounded-md shadow-sm p-3 placeholder-gray-400 text-gray-700 dark:text-white dark:bg-gray-900 resize-y transition duration-150 ease-in-out&quot;&#10;              required&#10;            &gt;&lt;/textarea&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div&gt;&#10;            &lt;label htmlFor=&quot;file-upload&quot; className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot;&gt;&#10;              Attach a Screenshot/File (Optional)&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;file&quot;&#10;              id=&quot;file-upload&quot;&#10;              onChange={(e) =&gt; setFile(e.target.files[0])}&#10;              className=&quot;block w-full text-sm text-gray-500 dark:text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-emerald-50 file:text-emerald-700 hover:file:bg-emerald-100 cursor-pointer transition duration-150 ease-in-out&quot;&#10;            /&gt;&#10;            {file &amp;&amp; &lt;p className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-300&quot;&gt;File selected: {file.name}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;input&#10;              type=&quot;checkbox&quot;&#10;              id=&quot;notifyByEmail&quot;&#10;              checked={notifyByEmail}&#10;              onChange={() =&gt; setNotifyByEmail(!notifyByEmail)}&#10;              className=&quot;h-4 w-4 text-emerald-600 focus:ring-emerald-500 border-gray-300 rounded cursor-pointer accent-emerald-600&quot;&#10;            /&gt;&#10;            &lt;label htmlFor=&quot;notifyByEmail&quot; className=&quot;ml-2 block text-sm text-gray-700 dark:text-gray-200 cursor-pointer&quot;&gt;&#10;              Notify me via email when the issue status changes&#10;            &lt;/label&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;motion.button&#10;            whileHover={{ scale: 1.05, y: -2 }}&#10;            whileTap={{ scale: 0.95 }}&#10;            transition={{ duration: 0.2, ease: 'easeOut' }}&#10;            type=&quot;submit&quot;&#10;            className=&quot;w-full bg-emerald-600 text-white font-semibold py-3 px-4 rounded-md shadow-lg hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2&quot;&#10;          &gt;&#10;            Submit Report&#10;          &lt;/motion.button&gt;&#10;        &lt;/form&gt;&#10;      &lt;/motion.div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useState, useCallback, useMemo } from 'react';&#13;&#10;import { motion } from 'framer-motion';&#13;&#10;import './ReportIssue.css';&#13;&#10;&#13;&#10;// Debounce hook for form inputs&#13;&#10;const useDebounce = (callback, delay) =&gt; {&#13;&#10;  const [debounceTimer, setDebounceTimer] = useState(null);&#13;&#10;&#13;&#10;  const debouncedCallback = useCallback((...args) =&gt; {&#13;&#10;    if (debounceTimer) {&#13;&#10;      clearTimeout(debounceTimer);&#13;&#10;    }&#13;&#10;    const newTimer = setTimeout(() =&gt; {&#13;&#10;      callback(...args);&#13;&#10;    }, delay);&#13;&#10;    setDebounceTimer(newTimer);&#13;&#10;  }, [callback, delay, debounceTimer]);&#13;&#10;&#13;&#10;  return debouncedCallback;&#13;&#10;};&#13;&#10;&#13;&#10;// Memoized background animations component&#13;&#10;const BackgroundAnimations = React.memo(() =&gt; {&#13;&#10;  // Simplified animation configs to reduce performance impact&#13;&#10;  const animationConfig = {&#13;&#10;    duration: 15,&#13;&#10;    repeat: Infinity,&#13;&#10;    repeatType: 'reverse',&#13;&#10;    ease: 'easeInOut'&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;&gt;&#13;&#10;      &lt;motion.div&#13;&#10;        className=&quot;absolute top-10 left-10 w-32 h-32 bg-emerald-200 rounded-full mix-blend-multiply filter blur-lg opacity-30&quot;&#13;&#10;        initial={{ scale: 0.8 }}&#13;&#10;        animate={{ scale: 1.2 }}&#13;&#10;        transition={animationConfig}&#13;&#10;      /&gt;&#13;&#10;      &lt;motion.div&#13;&#10;        className=&quot;absolute bottom-10 right-10 w-32 h-32 bg-teal-200 rounded-full mix-blend-multiply filter blur-lg opacity-30&quot;&#13;&#10;        initial={{ scale: 0.8 }}&#13;&#10;        animate={{ scale: 1.2 }}&#13;&#10;        transition={{ ...animationConfig, delay: 2 }}&#13;&#10;      /&gt;&#13;&#10;    &lt;/&gt;&#13;&#10;  );&#13;&#10;});&#13;&#10;&#13;&#10;BackgroundAnimations.displayName = 'BackgroundAnimations';&#13;&#10;&#13;&#10;// Memoized form input component&#13;&#10;const FormInput = React.memo(({ &#13;&#10;  type = 'text', &#13;&#10;  id, &#13;&#10;  label, &#13;&#10;  placeholder, &#13;&#10;  value, &#13;&#10;  onChange, &#13;&#10;  required = false,&#13;&#10;  rows &#13;&#10;}) =&gt; {&#13;&#10;  const InputComponent = type === 'textarea' ? 'textarea' : 'input';&#13;&#10;  &#13;&#10;  return (&#13;&#10;    &lt;div&gt;&#13;&#10;      &lt;label htmlFor={id} className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot;&gt;&#13;&#10;        {label}&#13;&#10;      &lt;/label&gt;&#13;&#10;      &lt;InputComponent&#13;&#10;        type={type !== 'textarea' ? type : undefined}&#13;&#10;        id={id}&#13;&#10;        placeholder={placeholder}&#13;&#10;        value={value}&#13;&#10;        onChange={onChange}&#13;&#10;        rows={rows}&#13;&#10;        className=&quot;w-full border-gray-300 focus:border-emerald-500 focus:ring-emerald-500 rounded-md shadow-sm p-3 placeholder-gray-400 text-gray-700 dark:text-white dark:bg-gray-900 transition duration-150 ease-in-out resize-y&quot;&#13;&#10;        required={required}&#13;&#10;      /&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;});&#13;&#10;&#13;&#10;FormInput.displayName = 'FormInput';&#13;&#10;&#13;&#10;export default React.memo(function ReportIssue() {&#13;&#10;  const [formData, setFormData] = useState({&#13;&#10;    phone: '',&#13;&#10;    email: '',&#13;&#10;    title: '',&#13;&#10;    description: '',&#13;&#10;    notifyByEmail: false&#13;&#10;  });&#13;&#10;  const [file, setFile] = useState(null);&#13;&#10;  const [isSubmitting, setIsSubmitting] = useState(false);&#13;&#10;&#13;&#10;  // Debounced form update function&#13;&#10;  const debouncedUpdate = useDebounce((field, value) =&gt; {&#13;&#10;    setFormData(prev =&gt; ({ ...prev, [field]: value }));&#13;&#10;  }, 150);&#13;&#10;&#13;&#10;  // Memoized form handlers&#13;&#10;  const handleInputChange = useCallback((field) =&gt; (e) =&gt; {&#13;&#10;    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;&#13;&#10;    debouncedUpdate(field, value);&#13;&#10;  }, [debouncedUpdate]);&#13;&#10;&#13;&#10;  const handleFileChange = useCallback((e) =&gt; {&#13;&#10;    setFile(e.target.files[0]);&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const handleSubmit = useCallback(async (e) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    &#13;&#10;    if (isSubmitting) return;&#13;&#10;    setIsSubmitting(true);&#13;&#10;&#13;&#10;    const formDataToSend = new FormData();&#13;&#10;    Object.entries(formData).forEach(([key, value]) =&gt; {&#13;&#10;      formDataToSend.append(key, value);&#13;&#10;    });&#13;&#10;    if (file) formDataToSend.append('file', file);&#13;&#10;&#13;&#10;    try {&#13;&#10;      const res = await fetch('http://localhost:5000/api/report', {&#13;&#10;        method: 'POST',&#13;&#10;        body: formDataToSend,&#13;&#10;      });&#13;&#10;&#13;&#10;      const data = await res.json();&#13;&#10;      alert(data.message);&#13;&#10;      &#13;&#10;      // Reset form&#13;&#10;      setFormData({&#13;&#10;        phone: '',&#13;&#10;        email: '',&#13;&#10;        title: '',&#13;&#10;        description: '',&#13;&#10;        notifyByEmail: false&#13;&#10;      });&#13;&#10;      setFile(null);&#13;&#10;    } catch (err) {&#13;&#10;      console.error('Submit error:', err);&#13;&#10;      alert('Failed to submit issue.');&#13;&#10;    } finally {&#13;&#10;      setIsSubmitting(false);&#13;&#10;    }&#13;&#10;  }, [formData, file, isSubmitting]);&#13;&#10;&#13;&#10;  // Memoized form fields configuration&#13;&#10;  const formFields = useMemo(() =&gt; [&#13;&#10;    {&#13;&#10;      id: 'phone',&#13;&#10;      type: 'tel',&#13;&#10;      label: 'Phone Number',&#13;&#10;      placeholder: 'e.g., +91 98765 43210',&#13;&#10;      required: true&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'email',&#13;&#10;      type: 'email',&#13;&#10;      label: 'Email Address',&#13;&#10;      placeholder: 'you@example.com',&#13;&#10;      required: true&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'title',&#13;&#10;      type: 'text',&#13;&#10;      label: 'Issue Title',&#13;&#10;      placeholder: 'e.g., Login button not working',&#13;&#10;      required: true&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'description',&#13;&#10;      type: 'textarea',&#13;&#10;      label: 'Describe the Issue',&#13;&#10;      placeholder: 'Please provide as much detail as possible about the issue you\'re experiencing. When did it happen? What steps did you take?',&#13;&#10;      rows: 5,&#13;&#10;      required: true&#13;&#10;    }&#13;&#10;  ], []);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;min-h-screen bg-gradient-to-br from-emerald-50 to-teal-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4 sm:p-6 lg:p-8 overflow-hidden&quot;&gt;&#13;&#10;      &lt;BackgroundAnimations /&gt;&#13;&#10;&#13;&#10;      &lt;motion.div&#13;&#10;        initial={{ opacity: 0, y: 30 }}&#13;&#10;        animate={{ opacity: 1, y: 0 }}&#13;&#10;        transition={{ duration: 0.5, ease: 'easeOut' }}&#13;&#10;        className=&quot;bg-white/70 dark:bg-gray-800 backdrop-blur-lg rounded-xl shadow-2xl p-6 sm:p-8 lg:p-10 w-full max-w-md border border-gray-100 dark:border-gray-700 z-10&quot;&#13;&#10;      &gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-extrabold text-center text-emerald-700 dark:text-white mb-6&quot;&gt;Report an Issue&lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-center text-gray-600 dark:text-gray-200 mb-8&quot;&gt;&#13;&#10;          We're here to help! Please fill out the form below to report any issues you've encountered.&#13;&#10;        &lt;/p&gt;&#13;&#10;&#13;&#10;        &lt;form className=&quot;space-y-6&quot; onSubmit={handleSubmit}&gt;&#13;&#10;          {formFields.map((field) =&gt; (&#13;&#10;            &lt;FormInput&#13;&#10;              key={field.id}&#13;&#10;              {...field}&#13;&#10;              value={formData[field.id]}&#13;&#10;              onChange={handleInputChange(field.id)}&#13;&#10;            /&gt;&#13;&#10;          ))}&#13;&#10;&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;label htmlFor=&quot;file-upload&quot; className=&quot;block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1&quot;&gt;&#13;&#10;              Attach a Screenshot/File (Optional)&#13;&#10;            &lt;/label&gt;&#13;&#10;            &lt;input&#13;&#10;              type=&quot;file&quot;&#13;&#10;              id=&quot;file-upload&quot;&#13;&#10;              onChange={handleFileChange}&#13;&#10;              className=&quot;block w-full text-sm text-gray-500 dark:text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-emerald-50 file:text-emerald-700 hover:file:bg-emerald-100 cursor-pointer transition duration-150 ease-in-out&quot;&#13;&#10;            /&gt;&#13;&#10;            {file &amp;&amp; &lt;p className=&quot;mt-2 text-xs text-gray-500 dark:text-gray-300&quot;&gt;File selected: {file.name}&lt;/p&gt;}&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;            &lt;input&#13;&#10;              type=&quot;checkbox&quot;&#13;&#10;              id=&quot;notifyByEmail&quot;&#13;&#10;              checked={formData.notifyByEmail}&#13;&#10;              onChange={handleInputChange('notifyByEmail')}&#13;&#10;              className=&quot;h-4 w-4 text-emerald-600 focus:ring-emerald-500 border-gray-300 rounded cursor-pointer accent-emerald-600&quot;&#13;&#10;            /&gt;&#13;&#10;            &lt;label htmlFor=&quot;notifyByEmail&quot; className=&quot;ml-2 block text-sm text-gray-700 dark:text-gray-200 cursor-pointer&quot;&gt;&#13;&#10;              Notify me via email when the issue status changes&#13;&#10;            &lt;/label&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;motion.button&#13;&#10;            whileHover={{ scale: 1.02 }}&#13;&#10;            whileTap={{ scale: 0.98 }}&#13;&#10;            transition={{ duration: 0.1 }}&#13;&#10;            type=&quot;submit&quot;&#13;&#10;            disabled={isSubmitting}&#13;&#10;            className=&quot;w-full bg-emerald-600 text-white font-semibold py-3 px-4 rounded-md shadow-lg hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200&quot;&#13;&#10;          &gt;&#13;&#10;            {isSubmitting ? 'Submitting...' : 'Submit Report'}&#13;&#10;          &lt;/motion.button&gt;&#13;&#10;        &lt;/form&gt;&#13;&#10;      &lt;/motion.div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Pages/Resources.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Pages/Resources.css" />
              <option name="originalContent" value=".resources-container {&#10;  max-width: 960px;&#10;  margin: auto;&#10;  padding: 2rem;&#10;  font-family: 'Segoe UI', sans-serif;&#10;}&#10;&#10;.resources-title {&#10;  text-align: center;&#10;  font-size: 2.5rem;&#10;  font-weight: bold;&#10;  margin-bottom: 2rem;&#10;  border-bottom: 2px solid #4caf50;&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.resources-section {&#10;  margin-bottom: 2rem;&#10;  border-left: 4px solid #4caf50;&#10;  padding-left: 1rem;&#10;}&#10;&#10;.resources-subtitle {&#10;  font-size: 1.5rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.6rem;&#10;  margin-bottom: 0.8rem;&#10;}&#10;&#10;.resources-text {&#10;  font-size: 1rem;&#10;  line-height: 1.6;&#10;}&#10;&#10;.resources-list {&#10;  list-style: disc;&#10;  padding-left: 1.5rem;&#10;  font-size: 1rem;&#10;  line-height: 1.6;&#10;}&#10;&#10;.icon {&#10;  font-size: 1.2rem;&#10;}&#10;&#10;.green {&#10;  color: #4caf50;&#10;}&#10;&#10;/* FAQ styles */&#10;.faq-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 1rem;&#10;}&#10;&#10;.faq-item {&#10;  border: 1px solid #ccc;&#10;  border-radius: 6px;&#10;  overflow: hidden;&#10;}&#10;&#10;.faq-question {&#10;  background: none;&#10;  border: none;&#10;  width: 100%;&#10;  text-align: left;&#10;  padding: 1rem;&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  cursor: pointer;&#10;  color: #333;&#10;}&#10;&#10;.faq-answer {&#10;  padding: 0.8rem 1rem;&#10;  background-color: #f7f7f7;&#10;  font-size: 0.95rem;&#10;  line-height: 1.5;&#10;}&#10;&#10;.arrow-icon {&#10;  font-size: 1rem;&#10;  color: #4caf50;&#10;}&#10;&#10;" />
              <option name="updatedContent" value=".resources-container {&#10;  max-width: 960px;&#10;  margin: auto;&#10;  padding: 2rem;&#10;  font-family: 'Segoe UI', sans-serif;&#10;  color: #333;&#10;}&#10;&#10;/* Dark mode support */&#10;.dark .resources-container {&#10;  color: #e0e0e0;&#10;}&#10;&#10;.resources-title {&#10;  text-align: center;&#10;  font-size: 2.5rem;&#10;  font-weight: bold;&#10;  margin-bottom: 2rem;&#10;  border-bottom: 2px solid #4caf50;&#10;  padding-bottom: 0.5rem;&#10;}&#10;&#10;.dark .resources-title {&#10;  color: #f0f0f0;&#10;}&#10;&#10;.resources-section {&#10;  margin-bottom: 2rem;&#10;  border-left: 4px solid #4caf50;&#10;  padding-left: 1rem;&#10;}&#10;&#10;.resources-subtitle {&#10;  font-size: 1.5rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.6rem;&#10;  margin-bottom: 0.8rem;&#10;}&#10;&#10;.dark .resources-subtitle {&#10;  color: #e0e0e0;&#10;}&#10;&#10;.resources-text {&#10;  font-size: 1rem;&#10;  line-height: 1.6;&#10;}&#10;&#10;.dark .resources-text {&#10;  color: #cccccc;&#10;}&#10;&#10;.resources-list {&#10;  list-style: disc;&#10;  padding-left: 1.5rem;&#10;  font-size: 1rem;&#10;  line-height: 1.6;&#10;}&#10;&#10;.dark .resources-list {&#10;  color: #cccccc;&#10;}&#10;&#10;.icon {&#10;  font-size: 1.2rem;&#10;}&#10;&#10;.green {&#10;  color: #4caf50;&#10;}&#10;&#10;/* FAQ styles */&#10;.faq-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 1rem;&#10;}&#10;&#10;.faq-item {&#10;  border: 1px solid #ccc;&#10;  border-radius: 6px;&#10;  overflow: hidden;&#10;}&#10;&#10;.dark .faq-item {&#10;  border-color: #555;&#10;}&#10;&#10;.faq-question {&#10;  background: none;&#10;  border: none;&#10;  width: 100%;&#10;  text-align: left;&#10;  padding: 1rem;&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  cursor: pointer;&#10;  color: #333;&#10;}&#10;&#10;.dark .faq-question {&#10;  color: #e0e0e0;&#10;}&#10;&#10;.faq-answer {&#10;  padding: 0.8rem 1rem;&#10;  background-color: #f7f7f7;&#10;  font-size: 0.95rem;&#10;  line-height: 1.5;&#10;}&#10;&#10;.dark .faq-answer {&#10;  background-color: #2a2a2a;&#10;  color: #cccccc;&#10;}&#10;&#10;.arrow-icon {&#10;  font-size: 1rem;&#10;  color: #4caf50;&#10;}&#10;&#10;.back-button {&#10;  display: flex;&#10;  align-items: center;&#10;  background: none;&#10;  border: none;&#10;  font-size: 1rem;&#10;  color: #4caf50;&#10;  margin-bottom: 1rem;&#10;  cursor: pointer;&#10;}&#10;&#10;.dark .back-button {&#10;  color: #5cbe60;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Pages/Resources.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Pages/Resources.jsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { useNavigate } from 'react-router-dom';&#10;import './Resources.css';&#10;import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';&#10;import {&#10;  faGavel,&#10;  faInfoCircle,&#10;  faPhoneAlt,&#10;  faQuestionCircle,&#10;  faChevronDown,&#10;  faChevronUp,&#10;  faFileAlt,&#10;  faArrowLeft&#10;} from '@fortawesome/free-solid-svg-icons';&#10;&#10;const faqData = [&#10;  {&#10;    question: &quot;Can I file a complaint anonymously?&quot;,&#10;    answer: &quot;Currently, you must register to file a complaint so authorities can track and respond.&quot;&#10;  },&#10;  {&#10;    question: &quot;What happens after I submit a complaint?&quot;,&#10;    answer: &quot;Your complaint is reviewed by the appropriate department and progress is tracked.&quot;&#10;  },&#10;  {&#10;    question: &quot;How long does it take to resolve?&quot;,&#10;    answer: &quot;Timelines vary, but we aim to address issues within 7 working days.&quot;&#10;  },&#10;  {&#10;    question: &quot;Will I be notified of status changes?&quot;,&#10;    answer: &quot;Yes, you'll receive email or dashboard updates on status changes.&quot;&#10;  }&#10;];&#10;&#10;const Resources = () =&gt; {&#10;  const [openIndex, setOpenIndex] = useState(null);&#10;  const navigate = useNavigate();&#10;&#10;  const toggleFAQ = (index) =&gt; {&#10;    setOpenIndex(openIndex === index ? null : index);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;resources-container bg-white dark:bg-gray-900&quot;&gt;&#10;      &lt;button&#10;        className=&quot;back-button&quot;&#10;        onClick={() =&gt; window.history.back()}&#10;        type=&quot;button&quot;&#10;      &gt;&#10;        ← Back&#10;      &lt;/button&gt;&#10;      &lt;h1 className=&quot;resources-title&quot;&gt;Citizen Resources&lt;/h1&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faGavel} className=&quot;icon green&quot; /&gt;&#10;          Your Rights &amp; Responsibilities&#10;        &lt;/h2&gt;&#10;        &lt;p className=&quot;resources-text&quot;&gt;&#10;          You have the right to file civic complaints and receive updates. Misuse or false complaints may lead to action.&#10;        &lt;/p&gt;&#10;      &lt;/section&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faInfoCircle} className=&quot;icon green&quot; /&gt;&#10;          How to File a Complaint&#10;        &lt;/h2&gt;&#10;        &lt;ol className=&quot;resources-list&quot;&gt;&#10;          &lt;li&gt;Login to your account.&lt;/li&gt;&#10;          &lt;li&gt;Click &quot;File a Complaint&quot; from the dashboard.&lt;/li&gt;&#10;          &lt;li&gt;Provide complete issue details.&lt;/li&gt;&#10;          &lt;li&gt;Submit and track the status anytime.&lt;/li&gt;&#10;        &lt;/ol&gt;&#10;      &lt;/section&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faPhoneAlt} className=&quot;icon green&quot; /&gt;&#10;          Emergency Contacts&#10;        &lt;/h2&gt;&#10;        &lt;ul className=&quot;resources-list&quot;&gt;&#10;          &lt;li&gt;Police: 100&lt;/li&gt;&#10;          &lt;li&gt;Fire: 101&lt;/li&gt;&#10;          &lt;li&gt;Women Helpline: 1091&lt;/li&gt;&#10;          &lt;li&gt;Child Helpline: 1098&lt;/li&gt;&#10;          &lt;li&gt;Cyber Crime: 155260&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      &lt;/section&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faFileAlt} className=&quot;icon green&quot; /&gt;&#10;          Related Laws &amp; Acts&#10;        &lt;/h2&gt;&#10;        &lt;p className=&quot;resources-text&quot;&gt;&#10;          Get simplified summaries of local civic laws, nuisance acts, and safety regulations.&#10;        &lt;/p&gt;&#10;      &lt;/section&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faQuestionCircle} className=&quot;icon green&quot; /&gt;&#10;          FAQs&#10;        &lt;/h2&gt;&#10;        &lt;div className=&quot;faq-section&quot;&gt;&#10;          {faqData.map((item, index) =&gt; (&#10;            &lt;div key={index} className=&quot;faq-item dark:bg-gray-800 dark:border-gray-700&quot;&gt;&#10;              &lt;button&#10;                className=&quot;faq-question dark:text-white dark:hover:bg-gray-700&quot;&#10;                onClick={() =&gt; toggleFAQ(index)}&#10;              &gt;&#10;                {item.question}&#10;                &lt;FontAwesomeIcon icon={openIndex === index ? faChevronUp : faChevronDown} className=&quot;arrow-icon&quot; /&gt;&#10;              &lt;/button&gt;&#10;              {openIndex === index &amp;&amp; (&#10;                &lt;div className=&quot;faq-answer dark:bg-gray-900 dark:text-gray-300&quot;&gt;&#10;                  {item.answer}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Resources;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { useNavigate } from 'react-router-dom';&#10;import './Resources.css';&#10;import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';&#10;import {&#10;  faGavel,&#10;  faInfoCircle,&#10;  faPhoneAlt,&#10;  faQuestionCircle,&#10;  faChevronDown,&#10;  faChevronUp,&#10;  faFileAlt,&#10;  faArrowLeft&#10;} from '@fortawesome/free-solid-svg-icons';&#10;&#10;const faqData = [&#10;  {&#10;    question: &quot;Can I file a complaint anonymously?&quot;,&#10;    answer: &quot;Currently, you must register to file a complaint so authorities can track and respond.&quot;&#10;  },&#10;  {&#10;    question: &quot;What happens after I submit a complaint?&quot;,&#10;    answer: &quot;Your complaint is reviewed by the appropriate department and progress is tracked.&quot;&#10;  },&#10;  {&#10;    question: &quot;How long does it take to resolve?&quot;,&#10;    answer: &quot;Timelines vary, but we aim to address issues within 7 working days.&quot;&#10;  },&#10;  {&#10;    question: &quot;Will I be notified of status changes?&quot;,&#10;    answer: &quot;Yes, you'll receive email or dashboard updates on status changes.&quot;&#10;  }&#10;];&#10;&#10;const Resources = () =&gt; {&#10;  const [openIndex, setOpenIndex] = useState(null);&#10;  const navigate = useNavigate();&#10;&#10;  const toggleFAQ = (index) =&gt; {&#10;    setOpenIndex(openIndex === index ? null : index);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;resources-container bg-white dark:bg-gray-900&quot;&gt;&#10;      &lt;button&#10;        className=&quot;back-button text-emerald-500 hover:text-emerald-600 dark:text-emerald-400 dark:hover:text-emerald-300&quot;&#10;        onClick={() =&gt; window.history.back()}&#10;        type=&quot;button&quot;&#10;      &gt;&#10;        &lt;FontAwesomeIcon icon={faArrowLeft} className=&quot;mr-2&quot; /&gt; Back&#10;      &lt;/button&gt;&#10;      &#10;      &lt;h1 className=&quot;resources-title text-gray-800 dark:text-white&quot;&gt;Citizen Resources&lt;/h1&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle text-gray-800 dark:text-white&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faGavel} className=&quot;icon green&quot; /&gt;&#10;          Your Rights &amp; Responsibilities&#10;        &lt;/h2&gt;&#10;        &lt;p className=&quot;resources-text text-gray-700 dark:text-gray-300&quot;&gt;&#10;          You have the right to file civic complaints and receive updates. Misuse or false complaints may lead to action.&#10;        &lt;/p&gt;&#10;      &lt;/section&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle text-gray-800 dark:text-white&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faInfoCircle} className=&quot;icon green&quot; /&gt;&#10;          How to File a Complaint&#10;        &lt;/h2&gt;&#10;        &lt;ol className=&quot;resources-list text-gray-700 dark:text-gray-300&quot;&gt;&#10;          &lt;li&gt;Login to your account.&lt;/li&gt;&#10;          &lt;li&gt;Click &quot;File a Complaint&quot; from the dashboard.&lt;/li&gt;&#10;          &lt;li&gt;Provide complete issue details.&lt;/li&gt;&#10;          &lt;li&gt;Submit and track the status anytime.&lt;/li&gt;&#10;        &lt;/ol&gt;&#10;      &lt;/section&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle text-gray-800 dark:text-white&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faPhoneAlt} className=&quot;icon green&quot; /&gt;&#10;          Emergency Contacts&#10;        &lt;/h2&gt;&#10;        &lt;ul className=&quot;resources-list text-gray-700 dark:text-gray-300&quot;&gt;&#10;          &lt;li&gt;Police: 100&lt;/li&gt;&#10;          &lt;li&gt;Fire: 101&lt;/li&gt;&#10;          &lt;li&gt;Women Helpline: 1091&lt;/li&gt;&#10;          &lt;li&gt;Child Helpline: 1098&lt;/li&gt;&#10;          &lt;li&gt;Cyber Crime: 155260&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      &lt;/section&gt;&#10;&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle text-gray-800 dark:text-white&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faFileAlt} className=&quot;icon green&quot; /&gt;&#10;          Related Laws &amp; Acts&#10;        &lt;/h2&gt;&#10;        &lt;p className=&quot;resources-text text-gray-700 dark:text-gray-300&quot;&gt;&#10;          Get simplified summaries of local civic laws, nuisance acts, and safety regulations.&#10;        &lt;/p&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Redesigned FAQ Section with proper dark mode support */}&#10;      &lt;section className=&quot;resources-section&quot;&gt;&#10;        &lt;h2 className=&quot;resources-subtitle text-gray-800 dark:text-white&quot;&gt;&#10;          &lt;FontAwesomeIcon icon={faQuestionCircle} className=&quot;icon green&quot; /&gt;&#10;          FAQs&#10;        &lt;/h2&gt;&#10;        &#10;        &lt;div className=&quot;mt-4 space-y-4&quot;&gt;&#10;          {faqData.map((item, index) =&gt; (&#10;            &lt;div &#10;              key={index} &#10;              className=&quot;overflow-hidden rounded-lg border dark:border-gray-700 bg-transparent dark:bg-transparent&quot;&#10;            &gt;&#10;              &lt;button&#10;                onClick={() =&gt; toggleFAQ(index)}&#10;                className=&quot;flex w-full justify-between items-center px-4 py-3 text-left text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200&quot;&#10;                aria-expanded={openIndex === index}&#10;              &gt;&#10;                &lt;span className=&quot;font-medium&quot;&gt;{item.question}&lt;/span&gt;&#10;                &lt;FontAwesomeIcon &#10;                  icon={openIndex === index ? faChevronUp : faChevronDown} &#10;                  className=&quot;text-emerald-500 dark:text-emerald-400 text-sm transition-transform duration-200&quot;&#10;                  style={{ &#10;                    transform: openIndex === index ? 'rotate(0deg)' : 'rotate(0deg)'&#10;                  }}&#10;                /&gt;&#10;              &lt;/button&gt;&#10;              &#10;              {openIndex === index &amp;&amp; (&#10;                &lt;div className=&quot;px-4 py-3 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-t dark:border-gray-700&quot;&gt;&#10;                  {item.answer}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Resources;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/AdminDashboard.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/AdminDashboard.jsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { useNavigate } from 'react-router-dom';&#10;import { toast ,ToastContainer} from 'react-toastify';&#10;const AdminDashboard = () =&gt; {&#10;  const navigate = useNavigate();&#10;  const [issues, setIssues] = useState([]);&#10;&#10;  // Fetch all reported issues&#10;  const fetchIssues = React.useCallback(async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch('http://localhost:5000/api/issues', {&#10;        headers: {&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Unauthorized or failed to fetch');&#10;      }&#10;&#10;      const data = await res.json();&#10;      setIssues(data);&#10;    } catch (error) {&#10;      console.error('Error fetching issues:', error);&#10;      alert('Failed to fetch issues. Please login again.');&#10;      navigate('/login');&#10;    }&#10;  }, [navigate]);&#10;&#10;  // Update issue status&#10;  const handleStatusChange = async (id, status) =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch(`http://localhost:5000/api/issues/${id}/status`, {&#10;        method: 'PATCH',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;        body: JSON.stringify({ status }),&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Failed to update status');&#10;      }&#10;&#10;      // Refresh issue list&#10;      fetchIssues();&#10;    } catch (error) {&#10;      console.error('Error updating status:', error);&#10;      alert('Could not update status.');&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchIssues();&#10;  }, [fetchIssues]);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      {/* Issues Table */}&#10;      &lt;main className=&quot;p-6&quot;&gt;&#10;        &lt;h2 className=&quot;text-xl font-bold mb-4&quot;&gt;Admin Dashboard&lt;/h2&gt;&#10;        &lt;p&gt;Welcome, Admin! You have access to admin controls.&lt;/p&gt;&#10;        &lt;ToastContainer&#10;        position=&quot;top-right&quot;&#10;        autoClose={3000}&#10;        closeOnClick&#10;        pauseOnHover&#10;        draggable&#10;        theme=&quot;dark&quot;&#10;        toastClassName=&quot;toast-body custom-toast-shadow&quot;&#10;        bodyClassName=&quot;text-sm font-medium&quot;&#10;      /&gt;&#10;        &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Reported Issues&lt;/h3&gt;&#10;&#10;        {issues.length === 0 ? (&#10;          &lt;p&gt;No issues found.&lt;/p&gt;&#10;        ) : (&#10;          &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;            &lt;table className=&quot;min-w-full border border-gray-300 bg-white text-sm rounded-lg overflow-hidden shadow&quot;&gt;&#10;              &lt;thead className=&quot;bg-gray-200 text-gray-700&quot;&gt;&#10;                &lt;tr&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Title&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Description&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Phone&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Email&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Status&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Change Status&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;              &lt;/thead&gt;&#10;              &lt;tbody&gt;&#10;                {issues.map((issue) =&gt; (&#10;                  &lt;tr key={issue._id} className=&quot;border-t border-gray-200&quot;&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.title}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.description}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.phone}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.email}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.status || 'Pending'}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;&#10;                      &lt;select&#10;                        value={issue.status || 'Pending'}&#10;                        onChange={(e) =&gt; handleStatusChange(issue._id, e.target.value)}&#10;                        className=&quot;border border-gray-300 rounded px-2 py-1&quot;&#10;                      &gt;&#10;                        &lt;option&gt;Pending&lt;/option&gt;&#10;                        &lt;option&gt;In Progress&lt;/option&gt;&#10;                        &lt;option&gt;Resolved&lt;/option&gt;&#10;                        &lt;option&gt;Rejected&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/td&gt;&#10;                  &lt;/tr&gt;&#10;                ))}&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default AdminDashboard;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#13;&#10;import { useNavigate } from 'react-router-dom';&#13;&#10;import { motion } from 'framer-motion';&#13;&#10;import { toast, ToastContainer } from 'react-toastify';&#13;&#10;&#13;&#10;const AdminDashboard = () =&gt; {&#13;&#10;  const navigate = useNavigate();&#13;&#10;  const [issues, setIssues] = useState([]);&#13;&#10;&#13;&#10;  // Animation variants for the page container&#13;&#10;  const pageVariants = {&#13;&#10;    initial: { opacity: 0, y: 20 },&#13;&#10;    animate: { &#13;&#10;      opacity: 1, &#13;&#10;      y: 0,&#13;&#10;      transition: { &#13;&#10;        duration: 0.6, &#13;&#10;        ease: &quot;easeOut&quot;,&#13;&#10;        staggerChildren: 0.1&#13;&#10;      }&#13;&#10;    },&#13;&#10;    exit: { &#13;&#10;      opacity: 0, &#13;&#10;      y: -20,&#13;&#10;      transition: { duration: 0.4 }&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  // Animation variants for table rows&#13;&#10;  const rowVariants = {&#13;&#10;    initial: { opacity: 0, x: -20 },&#13;&#10;    animate: { &#13;&#10;      opacity: 1, &#13;&#10;      x: 0,&#13;&#10;      transition: { duration: 0.4 }&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  // Fetch all reported issues&#13;&#10;  const fetchIssues = React.useCallback(async () =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('token');&#13;&#10;      const res = await fetch('http://localhost:5000/api/issues', {&#13;&#10;        headers: {&#13;&#10;          Authorization: `Bearer ${token}`,&#13;&#10;        },&#13;&#10;      });&#13;&#10;&#13;&#10;      if (!res.ok) {&#13;&#10;        throw new Error('Unauthorized or failed to fetch');&#13;&#10;      }&#13;&#10;&#13;&#10;      const data = await res.json();&#13;&#10;      setIssues(data);&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error fetching issues:', error);&#13;&#10;      alert('Failed to fetch issues. Please login again.');&#13;&#10;      navigate('/login');&#13;&#10;    }&#13;&#10;  }, [navigate]);&#13;&#10;&#13;&#10;  // Update issue status&#13;&#10;  const handleStatusChange = async (id, status) =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('token');&#13;&#10;      const res = await fetch(`http://localhost:5000/api/issues/${id}/status`, {&#13;&#10;        method: 'PATCH',&#13;&#10;        headers: {&#13;&#10;          'Content-Type': 'application/json',&#13;&#10;          Authorization: `Bearer ${token}`,&#13;&#10;        },&#13;&#10;        body: JSON.stringify({ status }),&#13;&#10;      });&#13;&#10;&#13;&#10;      if (!res.ok) {&#13;&#10;        throw new Error('Failed to update status');&#13;&#10;      }&#13;&#10;&#13;&#10;      // Refresh issue list&#13;&#10;      fetchIssues();&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error updating status:', error);&#13;&#10;      alert('Could not update status.');&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    fetchIssues();&#13;&#10;  }, [fetchIssues]);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;motion.div &#13;&#10;      className=&quot;min-h-screen bg-gray-50&quot;&#13;&#10;      variants={pageVariants}&#13;&#10;      initial=&quot;initial&quot;&#13;&#10;      animate=&quot;animate&quot;&#13;&#10;      exit=&quot;exit&quot;&#13;&#10;    &gt;&#13;&#10;      {/* Issues Table */}&#13;&#10;      &lt;main className=&quot;p-6&quot;&gt;&#13;&#10;        &lt;motion.h2 &#13;&#10;          className=&quot;text-xl font-bold mb-4&quot;&#13;&#10;          initial={{ opacity: 0, y: -20 }}&#13;&#10;          animate={{ opacity: 1, y: 0 }}&#13;&#10;          transition={{ duration: 0.6, delay: 0.1 }}&#13;&#10;        &gt;&#13;&#10;          Admin Dashboard&#13;&#10;        &lt;/motion.h2&gt;&#13;&#10;        &lt;motion.p&#13;&#10;          initial={{ opacity: 0, y: -10 }}&#13;&#10;          animate={{ opacity: 1, y: 0 }}&#13;&#10;          transition={{ duration: 0.6, delay: 0.2 }}&#13;&#10;        &gt;&#13;&#10;          Welcome, Admin! You have access to admin controls.&#13;&#10;        &lt;/motion.p&gt;&#13;&#10;        &lt;ToastContainer&#13;&#10;          position=&quot;top-right&quot;&#13;&#10;          autoClose={3000}&#13;&#10;          closeOnClick&#13;&#10;          pauseOnHover&#13;&#10;          draggable&#13;&#10;          theme=&quot;dark&quot;&#13;&#10;          toastClassName=&quot;toast-body custom-toast-shadow&quot;&#13;&#10;          bodyClassName=&quot;text-sm font-medium&quot;&#13;&#10;        /&gt;&#13;&#10;        &lt;motion.h3 &#13;&#10;          className=&quot;text-lg font-semibold mb-4&quot;&#13;&#10;          initial={{ opacity: 0, y: -10 }}&#13;&#10;          animate={{ opacity: 1, y: 0 }}&#13;&#10;          transition={{ duration: 0.6, delay: 0.3 }}&#13;&#10;        &gt;&#13;&#10;          Reported Issues&#13;&#10;        &lt;/motion.h3&gt;&#13;&#10;&#13;&#10;        {issues.length === 0 ? (&#13;&#10;          &lt;motion.p&#13;&#10;            initial={{ opacity: 0 }}&#13;&#10;            animate={{ opacity: 1 }}&#13;&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#13;&#10;          &gt;&#13;&#10;            No issues found.&#13;&#10;          &lt;/motion.p&gt;&#13;&#10;        ) : (&#13;&#10;          &lt;motion.div &#13;&#10;            className=&quot;overflow-x-auto&quot;&#13;&#10;            initial={{ opacity: 0, y: 20 }}&#13;&#10;            animate={{ opacity: 1, y: 0 }}&#13;&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#13;&#10;          &gt;&#13;&#10;            &lt;table className=&quot;min-w-full border border-gray-300 bg-white text-sm rounded-lg overflow-hidden shadow&quot;&gt;&#13;&#10;              &lt;thead className=&quot;bg-gray-200 text-gray-700&quot;&gt;&#13;&#10;                &lt;motion.tr&#13;&#10;                  initial={{ opacity: 0 }}&#13;&#10;                  animate={{ opacity: 1 }}&#13;&#10;                  transition={{ duration: 0.5, delay: 0.5 }}&#13;&#10;                &gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Title&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Description&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Phone&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Email&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Status&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Change Status&lt;/th&gt;&#13;&#10;                &lt;/motion.tr&gt;&#13;&#10;              &lt;/thead&gt;&#13;&#10;              &lt;tbody&gt;&#13;&#10;                {issues.map((issue, index) =&gt; (&#13;&#10;                  &lt;motion.tr &#13;&#10;                    key={issue._id} &#13;&#10;                    className=&quot;border-t border-gray-200&quot;&#13;&#10;                    variants={rowVariants}&#13;&#10;                    initial=&quot;initial&quot;&#13;&#10;                    animate=&quot;animate&quot;&#13;&#10;                    transition={{ delay: 0.6 + (index * 0.1) }}&#13;&#10;                  &gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.title}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.description}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.phone}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.email}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.status || 'Pending'}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;&#13;&#10;                      &lt;select&#13;&#10;                        value={issue.status || 'Pending'}&#13;&#10;                        onChange={(e) =&gt; handleStatusChange(issue._id, e.target.value)}&#13;&#10;                        className=&quot;border border-gray-300 rounded px-2 py-1&quot;&#13;&#10;                      &gt;&#13;&#10;                        &lt;option&gt;Pending&lt;/option&gt;&#13;&#10;                        &lt;option&gt;In Progress&lt;/option&gt;&#13;&#10;                        &lt;option&gt;Resolved&lt;/option&gt;&#13;&#10;                        &lt;option&gt;Rejected&lt;/option&gt;&#13;&#10;                      &lt;/select&gt;&#13;&#10;                    &lt;/td&gt;&#13;&#10;                  &lt;/motion.tr&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/tbody&gt;&#13;&#10;            &lt;/table&gt;&#13;&#10;          &lt;/motion.div&gt;&#13;&#10;        )}&#13;&#10;      &lt;/main&gt;&#13;&#10;    &lt;/motion.div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default AdminDashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>